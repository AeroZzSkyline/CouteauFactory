<?php

namespace VMS\VitrineBundle\Repository;
use VMS\VitrineBundle\Entity\Categorie;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByDateLimit($limit)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->orderBy('p.id', 'DESC')->setMaxResults($limit);

        return $qb->getQuery()->getResult();

    }

    public function findByCategoryLimit($categorie, $limit, $id)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->where('p.categorie = :categorie')
            ->setParameter('categorie', $categorie)
        ->andWhere($qb->expr()->neq('p.id', $id))
            ->orderBy('p.id', 'DESC')->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }
    
    public function findArray($array)
    {
        $dql = $this->createQueryBuilder('p');

        $dql
            ->where('p.id IN (:array)')
            ->setParameter('array', $array)
        ;
        return $dql->getQuery()->getResult();
    }

    public function findLikeText($text)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->where('p.libelleProduit LIKE :text')
            ->setParameter('text', '%'.$text.'%');

        return $qb->getQuery()->getResult();
    }

    public function findFilters($categorie, $priceMin, $priceMax)
    {
        $qb = $this->createQueryBuilder('p');

        //dump($priceMax, $priceMin);
        if (is_float($priceMin) && is_float($priceMax)) {
            $qb
                ->where('p.prix BETWEEN :min AND :max')
                ->setParameter('min', $priceMin)
                ->setParameter('max', $priceMax);
        } elseif (is_float($priceMin)){
            $qb
                ->where('p.prix > :priceMin')
                ->setParameter('priceMin', $priceMin);
        } elseif (is_float($priceMax)) {
            $qb
                ->where('p.prix > :priceMax')
                ->setParameter('priceMax', $priceMax);

        }

        // Normalement tu vérifies si catégorie est
        // une instance d'Entity Category en utilisant ton repo et en faisant une request simple
        // Du coup là c'est caca mais tant pis
        if ($categorie != null) {
            $qb
                ->innerJoin('p.categorie', 'c')
                ->where('c.id = :categorie')
                ->setParameter('categorie', $categorie);
        }

        return $qb->getQuery()->getResult();
    }
}
