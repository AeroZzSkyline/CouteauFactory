<?php

namespace VMS\VitrineBundle\Repository;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByDateLimit($limit)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->orderBy('p.id', 'DESC')->setMaxResults($limit);

        return $qb->getQuery()->getResult();

    }

    public function findByCategoryLimit($categorie, $limit, $id)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->where('p.categorie = :categorie')
            ->setParameter('categorie', $categorie)
        ->andWhere($qb->expr()->neq('p.id', $id))
            ->orderBy('p.id', 'DESC')->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }
    
    public function findArray($array)
    {
        $dql = $this->createQueryBuilder('p');

        $dql
            ->where('p.id IN (:array)')
            ->setParameter('array', $array)
        ;
        return $dql->getQuery()->getResult();
    }

    public function findLikeText($text)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->where('p.libelleProduit LIKE :text')
            ->setParameter('text', '%'.$text.'%');

        return $qb->getQuery()->getResult();
    }

    public function findFilters($category = null, $priceMin = 0, $priceMax = 1000)
    {
        $qb = $this->createQueryBuilder('p');

        if($category == null){
            $qb->where('p.prix BETWEEN :min AND :max')
                ->setParameter('min', $priceMin)
                ->setParameter('max', $priceMax);
        }
        else{
            $qb->where('p.categorie = :categorie')
                ->setParameter('categorie', $category)
                ->andWhere('p.prix BETWEEN :min AND :max')
                ->setParameter('min', $priceMin)
                ->setParameter('max', $priceMax);
        }

        return $qb->getQuery()->getResult();
    }
}
